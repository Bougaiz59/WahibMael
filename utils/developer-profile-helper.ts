import { createClient } from '@/lib/supabase'

const supabase = createClient()

/**
 * Cr√©e automatiquement un profil d√©veloppeur bas√© sur les m√©tadonn√©es utilisateur
 * si le profil n'existe pas d√©j√†
 */
export async function ensureDeveloperProfile(userId: string): Promise<boolean> {
  try {
    console.log('üîÑ V√©rification du profil d√©veloppeur pour:', userId)

    // V√©rifier si le profil d√©veloppeur existe d√©j√†
    const { data: existingProfile } = await supabase
      .from('developer_profiles')
      .select('id')
      .eq('id', userId)
      .single()

    if (existingProfile) {
      console.log('‚úÖ Profil d√©veloppeur existe d√©j√†')
      return true
    }

    console.log('‚ö†Ô∏è Profil d√©veloppeur manquant, cr√©ation...')

    // R√©cup√©rer l'utilisateur et ses m√©tadonn√©es
    const { data: { user } } = await supabase.auth.getUser()
    if (!user || user.id !== userId) {
      console.error('‚ùå Utilisateur non trouv√© ou ID diff√©rent')
      return false
    }

    // R√©cup√©rer le profil de base
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single()

    if (!profile || profile.user_type !== 'developer') {
      console.log('‚ö†Ô∏è Pas un d√©veloppeur, aucun profil √† cr√©er')
      return false
    }

    // Extraire les donn√©es des m√©tadonn√©es utilisateur
    const metadata = user.user_metadata || {}
    
    const developerProfileData = {
      id: userId,
      title: metadata.title || profile.full_name || 'D√©veloppeur',
      bio: metadata.bio || '',
      location: '',
      phone: metadata.phone || '',
      experience_years: metadata.experience_years || 0,
      daily_rate: metadata.daily_rate || null,
      daily_rate_defined: metadata.daily_rate_defined !== false,
      availability: 'available',
      skills: Array.isArray(metadata.skills) ? metadata.skills : [],
      specializations: Array.isArray(metadata.specializations) ? metadata.specializations : [],
      languages: [],
      github_url: metadata.github_url || '',
      linkedin_url: metadata.linkedin_url || '',
      portfolio_url: metadata.portfolio_url || '',
      website: metadata.portfolio_url || '',
      average_rating: 0,
      total_ratings: 0,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }

    console.log('üìù Cr√©ation du profil d√©veloppeur avec:', developerProfileData)

    // Cr√©er le profil d√©veloppeur
    const { data: insertResult, error: insertError } = await supabase
      .from('developer_profiles')
      .insert(developerProfileData)
      .select()

    if (insertError) {
      console.error('‚ùå Erreur cr√©ation profil d√©veloppeur:', insertError)
      return false
    }

    console.log('‚úÖ Profil d√©veloppeur cr√©√© avec succ√®s:', insertResult)
    return true

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification/cr√©ation du profil:', error)
    return false
  }
}

/**
 * V√©rifie et cr√©e les profils d√©veloppeurs manquants pour tous les d√©veloppeurs
 */
export async function checkAllDeveloperProfiles(): Promise<void> {
  try {
    console.log('üîÑ V√©rification de tous les profils d√©veloppeurs...')

    // R√©cup√©rer tous les d√©veloppeurs
    const { data: developers } = await supabase
      .from('profiles')
      .select('id, user_type')
      .eq('user_type', 'developer')

    if (!developers || developers.length === 0) {
      console.log('‚ÑπÔ∏è Aucun d√©veloppeur trouv√©')
      return
    }

    console.log(`üìä ${developers.length} d√©veloppeur(s) trouv√©(s)`)

    // V√©rifier les profils d√©veloppeurs existants
    const { data: existingProfiles } = await supabase
      .from('developer_profiles')
      .select('id')

    const existingIds = new Set(existingProfiles?.map(p => p.id) || [])
    const missingProfiles = developers.filter(dev => !existingIds.has(dev.id))

    if (missingProfiles.length === 0) {
      console.log('‚úÖ Tous les profils d√©veloppeurs existent')
      return
    }

    console.log(`‚ö†Ô∏è ${missingProfiles.length} profil(s) d√©veloppeur manquant(s)`)

    // Cr√©er les profils manquants
    for (const dev of missingProfiles) {
      console.log(`üîß Cr√©ation du profil pour ${dev.id}...`)
      await ensureDeveloperProfile(dev.id)
    }

    console.log('üéâ V√©rification termin√©e')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification g√©n√©rale:', error)
  }
} 